/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authLayoutRouteImport } from './routes/(auth)/_layout'
import { Route as appLayoutRouteImport } from './routes/(app)/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appdashboardLayoutRouteImport } from './routes/(app)/(dashboard)/_layout'
import { Route as appdashboardHomeRouteImport } from './routes/(app)/(dashboard)/home'

const authLayoutRoute = authLayoutRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appLayoutRoute = appLayoutRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)
const appdashboardLayoutRoute = appdashboardLayoutRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => appLayoutRoute,
} as any)
const appdashboardHomeRoute = appdashboardHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => appdashboardLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appdashboardLayoutRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/home': typeof appdashboardHomeRoute
}
export interface FileRoutesByTo {
  '/': typeof appdashboardLayoutRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/home': typeof appdashboardHomeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appLayoutRouteWithChildren
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(app)/(dashboard)': typeof appdashboardLayoutRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(app)/(dashboard)/home': typeof appdashboardHomeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/signup' | '/home'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/home'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(auth)'
    | '/(app)/(dashboard)'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(app)/(dashboard)/home'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appLayoutRoute: typeof appLayoutRouteWithChildren
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(app)/(dashboard)': {
      id: '/(app)/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appdashboardLayoutRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/(dashboard)/home': {
      id: '/(app)/(dashboard)/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof appdashboardHomeRouteImport
      parentRoute: typeof appdashboardLayoutRoute
    }
  }
}

interface appdashboardLayoutRouteChildren {
  appdashboardHomeRoute: typeof appdashboardHomeRoute
}

const appdashboardLayoutRouteChildren: appdashboardLayoutRouteChildren = {
  appdashboardHomeRoute: appdashboardHomeRoute,
}

const appdashboardLayoutRouteWithChildren =
  appdashboardLayoutRoute._addFileChildren(appdashboardLayoutRouteChildren)

interface appLayoutRouteChildren {
  appdashboardLayoutRoute: typeof appdashboardLayoutRouteWithChildren
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appdashboardLayoutRoute: appdashboardLayoutRouteWithChildren,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface authLayoutRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appLayoutRoute: appLayoutRouteWithChildren,
  authLayoutRoute: authLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
